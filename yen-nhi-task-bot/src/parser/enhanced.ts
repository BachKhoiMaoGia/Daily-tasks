/**
 * Enhanced parser with LLM integration for intelligent command detection
 * Ph√¢n bi·ªát ƒë√¢u l√† task command th·ª±c s·ª± vs tr√≤ chuy·ªán b√¨nh th∆∞·ªùng
 */
import logger from '../utils/logger';
import { config } from '../config/index';

// Simple regex patterns for obvious commands
const EXPLICIT_COMMANDS = /^\/(?:new|t·∫°o|list|done|delete|x√≥a|help|stats|xong|ho√†n|ho√†n\s*th√†nh|ho√†nh\s*th√†nh|me|edit|s·ª≠a|ch·ªânh\s*s·ª≠a)\b/i;
const SIMPLE_QUERIES = /^(th·ªëng k√™|bao nhi√™u|ho√†n th√†nh|ch∆∞a xong|danh s√°ch|xem task|li·ªát k√™)$/i;

// Keywords that indicate task creation intent
const TASK_INTENT_KEYWORDS = [
    'nh·∫Øc nh·ªü', 'nh·∫Øc', 'th√™m task', 't·∫°o task', 'task m·ªõi', 'vi·ªác c·∫ßn l√†m',
    'c·∫ßn l√†m', 'ph·∫£i l√†m', 'l∆∞u √Ω', 'ghi nh·ªõ', 'deadline', 'h·∫°n ch√≥t',
    'meeting', 'h·ªçp', 'cu·ªôc h·ªçp', 'appointment', 'h·∫πn', 'l·ªãch h·∫πn',
    'b√°o c√°o', 'l√†m', 'ho√†n th√†nh', 'n·ªôp', 'presentation', 'thuy·∫øt tr√¨nh',
    'h·ªçc', 't·∫≠p', '√¥n', 'luy·ªán', 'th·ª±c hi·ªán', 'chu·∫©n b·ªã', 'setup',
    'c√†i ƒë·∫∑t', 'ki·ªÉm tra', 'review', 'check', 'test', 'deploy',
    'bu·ªïi', 'l·ªõp', 'kh√≥a', 'course', 'class', 'training'
];

// Delete/done action keywords
const DELETE_KEYWORDS = [
    'x√≥a', 'delete', 'remove', 'h·ªßy', 'cancel', 'b·ªè', 'lo·∫°i b·ªè'
];

const DONE_KEYWORDS = [
    'xong', 'done', 'ho√†n th√†nh', 'finish', 'complete', 'ƒë√£ l√†m', 'ƒë√£ xong'
];

const EDIT_KEYWORDS = [
    's·ª≠a', 'edit', 'ch·ªânh s·ª≠a', 'thay ƒë·ªïi', 'c·∫≠p nh·∫≠t', 'update', 'modify', 'change'
];

// Phrases that indicate NOT a task (casual conversation)
const NON_TASK_INDICATORS = [
    'ch√†o', 'hello', 'hi', 'xin ch√†o', 'nh∆∞ th·∫ø n√†o', 'th·∫ø n√†o', 'sao r·ªìi',
    'c√≥ kh·ªèe kh√¥ng', 'kh·ªèe kh√¥ng', 'ƒÉn c∆°m ch∆∞a', 'l√†m g√¨ ƒë√≥', 'ƒëang l√†m g√¨',
    'ok', 'okay', 'ƒë∆∞·ª£c r·ªìi', 'c·∫£m ∆°n', 'thanks', 'thank you', 'bye', 't·∫°m bi·ªát',
    'haha', 'hihi', 'lol', 'üòÇ', 'üòä', 'üëç', 'good', 't·ªët', 'ƒë√∫ng r·ªìi'
];

export interface EnhancedCommand {
    cmd: string;
    args: string;
    confidence: number; // 0-1, m·ª©c ƒë·ªô tin c·∫≠y l√† command th·ª±c s·ª±
    reasoning: string; // L√Ω do ph√¢n lo·∫°i
}

/**
 * Enhanced parser with "/" prefix logic and natural language support
 * - Messages with "/" are task-related commands
 * - Messages without "/" are analyzed for natural language task intent
 * - Special handling for delete/done actions without "/" prefix
 */
export function parseCommandEnhanced(text: string): EnhancedCommand | null {
    if (typeof text !== 'string') {
        logger.warn('parseCommandEnhanced received non-string input:', text);
        return null;
    }

    text = text.trim();

    // Quick exit for empty text
    if (!text) return null;

    // Check "/" prefix first
    const hasSlashPrefix = text.startsWith('/');

    if (hasSlashPrefix) {
        // Messages with "/" are ALWAYS task-related commands
        logger.info(`[Parser] Task command detected with "/" prefix: "${text}"`);
        return parseTaskCommand(text);
    } else {
        // Messages without "/" - check for natural language task intent
        logger.info(`[Parser] Analyzing natural language for task intent: "${text}"`);

        // Special check for delete/done actions without "/" prefix first
        const actionCommand = detectActionCommand(text);
        if (actionCommand) {
            return actionCommand;
        }

        return parseNaturalLanguage(text);
    }
}

/**
 * Parse task commands with "/" prefix
 * This function handles all task-related operations and can call LLM for classification
 */
function parseTaskCommand(text: string): EnhancedCommand {
    // 1. Direct command mapping first
    if (text.startsWith('/help')) return { cmd: 'help', args: '', confidence: 1.0, reasoning: 'Help command' };
    if (text.startsWith('/list')) return { cmd: 'list', args: '', confidence: 1.0, reasoning: 'List command' };
    if (text.startsWith('/stats')) return { cmd: 'stats', args: '', confidence: 1.0, reasoning: 'Stats command' };
    if (text.startsWith('/me')) return { cmd: 'me', args: '', confidence: 1.0, reasoning: 'Me command' };    // 2. Handle specific Vietnamese and English commands with proper argument extraction
    if (text.startsWith('/t·∫°o ')) {
        return { cmd: 'new', args: text.substring(5).trim(), confidence: 1.0, reasoning: 'Explicit Vietnamese create command' };
    }
    if (text.startsWith('/new ')) {
        return { cmd: 'new', args: text.substring(5).trim(), confidence: 1.0, reasoning: 'Explicit new command' };
    }

    // Handle Vietnamese list commands (multi-word)
    if (text.startsWith('/danh s√°ch')) {
        const afterCommand = text.substring(10).trim(); // "/danh s√°ch".length = 10
        return { cmd: 'list', args: afterCommand, confidence: 1.0, reasoning: 'Vietnamese list command' };
    }    // Handle pending commands
    if (text.startsWith('/pending ')) {
        return { cmd: 'pending', args: text.substring(9).trim(), confidence: 1.0, reasoning: 'Explicit pending command' };
    }
    if (text.startsWith('/ch·ªù ') || text.startsWith('/ƒëang ch·ªù ')) {
        const prefix = text.startsWith('/ch·ªù ') ? '/ch·ªù ' : '/ƒëang ch·ªù ';
        return { cmd: 'pending', args: text.substring(prefix.length).trim(), confidence: 1.0, reasoning: 'Vietnamese pending command' };
    }

    // Handle search commands
    if (text.startsWith('/search ')) {
        return { cmd: 'search', args: text.substring(8).trim(), confidence: 1.0, reasoning: 'Explicit search command' };
    }
    if (text.startsWith('/t√¨m ') || text.startsWith('/t√¨m ki·∫øm ')) {
        const prefix = text.startsWith('/t√¨m ki·∫øm ') ? '/t√¨m ki·∫øm ' : '/t√¨m ';
        return { cmd: 'search', args: text.substring(prefix.length).trim(), confidence: 1.0, reasoning: 'Vietnamese search command' };
    }

    if (text.startsWith('/xong ') || text.startsWith('/ho√†n ') || text.startsWith('/done ')) {
        const prefix = text.startsWith('/xong ') ? '/xong ' :
            text.startsWith('/ho√†n ') ? '/ho√†n ' : '/done ';
        return { cmd: 'done', args: text.substring(prefix.length).trim(), confidence: 1.0, reasoning: 'Explicit done command' };
    } if (text.startsWith('/x√≥a ') || text.startsWith('/delete ')) {
        const prefix = text.startsWith('/x√≥a ') ? '/x√≥a ' : '/delete ';
        return { cmd: 'delete', args: text.substring(prefix.length).trim(), confidence: 1.0, reasoning: 'Explicit delete command' };
    }
    if (text.startsWith('/s·ª≠a ') || text.startsWith('/edit ') || text.startsWith('/ch·ªânh s·ª≠a ')) {
        const prefix = text.startsWith('/ch·ªânh s·ª≠a ') ? '/ch·ªânh s·ª≠a ' :
            text.startsWith('/s·ª≠a ') ? '/s·ª≠a ' : '/edit ';
        return { cmd: 'edit', args: text.substring(prefix.length).trim(), confidence: 1.0, reasoning: 'Explicit edit command' };
    }

    // 3. Intelligent classification for complex commands
    // TODO: Add LLM integration here for better classification
    // For now, use regex-based classification

    // Check for task management patterns
    if (text.includes('pending') || text.includes('ch·ªù') || text.includes('ƒëang ch·ªù')) {
        return { cmd: 'pending', args: text, confidence: 0.9, reasoning: 'Pending task pattern detected' };
    }

    if (text.includes('overdue') || text.includes('qu√° h·∫°n') || text.includes('tr·ªÖ h·∫°n')) {
        return { cmd: 'overdue', args: text, confidence: 0.9, reasoning: 'Overdue task pattern detected' };
    }    // 4. Extract args for other commands that take them - handle Vietnamese characters properly
    const match = text.match(/^\/([^\s]+)(?:\s+(.+))?/);
    if (match) {
        const [, cmd, args] = match;
        const normalizedCmd = cmd.toLowerCase();        // Normalize Vietnamese commands to English
        if (normalizedCmd === 't·∫°o') {
            return { cmd: 'new', args: args || '', confidence: 1.0, reasoning: 'Vietnamese create command via regex' };
        }
        if (['xong', 'ho√†n', 'ho√†nh'].includes(normalizedCmd)) {
            return { cmd: 'done', args: args || '', confidence: 1.0, reasoning: 'Vietnamese done command via regex' };
        } if (['x√≥a', 'xoa'].includes(normalizedCmd)) {
            return { cmd: 'delete', args: args || '', confidence: 1.0, reasoning: 'Vietnamese delete command via regex' };
        }
        if (['s·ª≠a', 'edit', 'ch·ªânh'].includes(normalizedCmd)) {
            return { cmd: 'edit', args: args || '', confidence: 1.0, reasoning: 'Vietnamese edit command via regex' };
        }
        if (['danh', 'list'].includes(normalizedCmd)) {
            return { cmd: 'list', args: args || '', confidence: 1.0, reasoning: 'List command via regex' };
        } if (['ch·ªù', 'pending', 'ƒëang'].includes(normalizedCmd)) {
            return { cmd: 'pending', args: args || '', confidence: 1.0, reasoning: 'Pending command via regex' };
        }
        if (['th·ªëng', 'stats', 'th·ªëng_k√™'].includes(normalizedCmd)) {
            return { cmd: 'stats', args: args || '', confidence: 1.0, reasoning: 'Stats command via regex' };
        }
        if (['t√¨m', 'search', 't√¨m_ki·∫øm'].includes(normalizedCmd)) {
            return { cmd: 'search', args: args || '', confidence: 1.0, reasoning: 'Search command via regex' };
        }

        return { cmd: normalizedCmd, args: args || '', confidence: 1.0, reasoning: 'Explicit command with / prefix' };
    }

    // 5. Default to new task creation for any "/" prefixed message
    return { cmd: 'new', args: text.substring(1).trim(), confidence: 0.8, reasoning: 'Default task creation from / prefix' };
}

function parseSimpleQuery(text: string): EnhancedCommand {
    if (/^(th·ªëng k√™|bao nhi√™u|ho√†n th√†nh|ch∆∞a xong)$/i.test(text)) {
        return {
            cmd: 'stats',
            args: '',
            confidence: 0.95,
            reasoning: 'Simple stats query'
        };
    }
    if (/^(danh s√°ch|xem task|li·ªát k√™)$/i.test(text)) {
        return {
            cmd: 'list',
            args: '',
            confidence: 0.95,
            reasoning: 'Simple list query'
        };
    }

    return {
        cmd: 'unknown',
        args: '',
        confidence: 0.0,
        reasoning: 'Unknown simple query'
    };
}

function isObviouslyNotTask(text: string): boolean {
    const textLower = text.toLowerCase();

    // Check for casual conversation indicators
    for (const indicator of NON_TASK_INDICATORS) {
        if (textLower.includes(indicator)) {
            return true;
        }
    }

    // Very short responses (1-3 characters) are usually not tasks
    if (text.length <= 3 && !/^\//.test(text)) {
        return true;
    }

    // Only emojis or punctuation
    if (/^[\s\p{Emoji}\p{P}]*$/u.test(text)) {
        return true;
    } return false;
}

/**
 * Detect action commands (delete, done) without "/" prefix
 * Examples: "delete hoc buoi chieu", "xong task 1", "ho√†n th√†nh b√°o c√°o"
 */
function detectActionCommand(text: string): EnhancedCommand | null {
    const textLower = text.toLowerCase();

    // Check for delete patterns
    for (const keyword of DELETE_KEYWORDS) {
        if (textLower.startsWith(keyword.toLowerCase() + ' ')) {
            const args = text.substring(keyword.length).trim();
            return {
                cmd: 'delete',
                args: args,
                confidence: 0.9,
                reasoning: `Delete action detected with keyword: "${keyword}"`
            };
        }
    }    // Check for done patterns
    for (const keyword of DONE_KEYWORDS) {
        if (textLower.startsWith(keyword.toLowerCase() + ' ')) {
            const args = text.substring(keyword.length).trim();
            return {
                cmd: 'done',
                args: args,
                confidence: 0.9,
                reasoning: `Done action detected with keyword: "${keyword}"`
            };
        }
    }

    // Check for edit patterns
    for (const keyword of EDIT_KEYWORDS) {
        if (textLower.startsWith(keyword.toLowerCase() + ' ')) {
            const args = text.substring(keyword.length).trim();
            return {
                cmd: 'edit',
                args: args,
                confidence: 0.9,
                reasoning: `Edit action detected with keyword: "${keyword}"`
            };
        }
    }

    // Check for "xong" at the end of sentence (Vietnamese style)
    if (textLower.endsWith(' xong') || textLower.endsWith(' r·ªìi')) {
        const keyword = textLower.endsWith(' xong') ? ' xong' : ' r·ªìi';
        const args = text.substring(0, text.length - keyword.length).trim();
        return {
            cmd: 'done',
            args: args,
            confidence: 0.8,
            reasoning: `Done action detected with suffix: "${keyword}"`
        };
    }

    return null;
}

function detectTaskIntent(text: string): { isTask: boolean; confidence: number; reasoning: string } {
    const textLower = text.toLowerCase();

    // Check for explicit task keywords
    for (const keyword of TASK_INTENT_KEYWORDS) {
        if (textLower.includes(keyword)) {
            return {
                isTask: true,
                confidence: 0.8,
                reasoning: `Contains task keyword: "${keyword}"`
            };
        }
    }    // Check for time/date patterns (indicates scheduling)
    const timePatterns = [
        /\b\d{1,2}:\d{2}\b/, // HH:mm
        /\b\d{1,2}h\d{0,2}\b/, // 3h30, 15h
        /\b\d{1,2}\s*(gi·ªù|h)\s*\d{0,2}\s*(ph√∫t)?\b/i, // 3 gi·ªù 30 ph√∫t, 15h30
        /\b\d{1,2}\/\d{1,2}(\/\d{4})?\b/, // MM/DD or DD/MM/YYYY
        /\b\d{4}-\d{2}-\d{2}\b/, // YYYY-MM-DD
        /\b\d{1,2}-\d{1,2}(-\d{4})?\b/, // DD-MM-YYYY
        /\b(ng√†y|th√°ng|nƒÉm|gi·ªù|ph√∫t|tu·∫ßn|th·ª©)\s*\d+\b/i, // ng√†y 15, th√°ng 5, th·ª© 2
        /\b\d+\s*(ng√†y|th√°ng|nƒÉm|gi·ªù|ph√∫t|tu·∫ßn)\b/i, // 15 ng√†y, 5 th√°ng
        /\b(th·ª©\s*[2-8]|ch·ªß\s*nh·∫≠t|cn)\b/i, // th·ª© 2, th·ª© 3, ch·ªß nh·∫≠t
        /\b(h√¥m nay|ng√†y mai|kia|tu·∫ßn sau|tu·∫ßn t·ªõi|th√°ng sau|th√°ng t·ªõi|nƒÉm sau)\b/i, // Relative time
        /\b(s√°ng|chi·ªÅu|t·ªëi|ƒë√™m)\b/i, // Time of day
        /\b(bu·ªïi\s*(s√°ng|chi·ªÅu|t·ªëi))\b/i, // bu·ªïi s√°ng, bu·ªïi chi·ªÅu
        /\b(l√∫c\s*\d{1,2})\b/i, // l√∫c 3, l√∫c 15
        /\b(\d{1,2}\s*(pm|am))\b/i, // 3pm, 2am
        /\b(deadline|h·∫°n\s*ch√≥t|due)\b/i // Deadline keywords
    ];

    for (const pattern of timePatterns) {
        if (pattern.test(text)) {
            return {
                isTask: true,
                confidence: 0.7,
                reasoning: 'Contains time/date information'
            };
        }
    }    // Check for action verbs that suggest tasks
    const actionVerbs = [
        'l√†m', 'ho√†n th√†nh', 'g·ª≠i', 'g·ªçi', 'ki·ªÉm tra', 'mua', 'ƒëi', 'vi·∫øt',
        'chu·∫©n b·ªã', 's·ª≠a', 't·∫°o', 'build', 'deploy', 'test', 'review',
        'h·ªçc', '√¥n', 't·∫≠p', 'luy·ªán', 'ƒë·ªçc', 'xem', 'nghe', 'th·ª±c hi·ªán',
        'setup', 'c√†i ƒë·∫∑t', 'config', 'configure', 'fix', 'debug',
        'submit', 'n·ªôp', 'giao', 'tr√¨nh b√†y', 'present', 'demo'
    ];

    for (const verb of actionVerbs) {
        if (textLower.includes(verb)) {
            return {
                isTask: true,
                confidence: 0.6,
                reasoning: `Contains action verb: "${verb}"`
            };
        }
    }

    return { isTask: false, confidence: 0, reasoning: 'No task indicators found' };
}

function analyzeStructure(text: string): { isLikelyTask: boolean; confidence: number; reasoning: string } {
    // Very short texts are usually not tasks
    if (text.length < 5) {
        return {
            isLikelyTask: false,
            confidence: 0.1,
            reasoning: 'Too short to be a task'
        };
    }

    // Very long texts might be conversations
    if (text.length > 200) {
        return {
            isLikelyTask: false,
            confidence: 0.2,
            reasoning: 'Too long, likely conversation'
        };
    }

    // Contains question words - likely not a task
    const questionWords = ['sao', 'g√¨', 'ai', 'ƒë√¢u', 'khi n√†o', 'bao gi·ªù', 'why', 'what', 'when', 'where', 'how', '?'];
    const textLower = text.toLowerCase();

    for (const word of questionWords) {
        if (textLower.includes(word)) {
            return {
                isLikelyTask: false,
                confidence: 0.3,
                reasoning: `Contains question word: "${word}"`
            };
        }
    }

    // Reasonable length, declarative sentence - could be a task
    if (text.length >= 10 && text.length <= 100) {
        return {
            isLikelyTask: true,
            confidence: 0.4,
            reasoning: 'Reasonable length declarative sentence'
        };
    }

    return {
        isLikelyTask: false,
        confidence: 0.1,
        reasoning: 'No strong structural indicators'
    };
}

/**
 * Parse natural language messages for task intent
 * Analyzes messages without "/" prefix to detect task creation requests
 */
function parseNaturalLanguage(text: string): EnhancedCommand | null {
    const lowerText = text.toLowerCase();

    // Check for obvious non-task indicators first
    const hasNonTaskIndicator = NON_TASK_INDICATORS.some(indicator =>
        lowerText.includes(indicator.toLowerCase())
    );

    if (hasNonTaskIndicator) {
        logger.info(`[Parser] Non-task conversation detected: "${text}"`);
        return null;
    }

    // Check for task creation intent keywords
    const hasTaskIntent = TASK_INTENT_KEYWORDS.some(keyword =>
        lowerText.includes(keyword.toLowerCase())
    );    // Check for reminder patterns
    const reminderPatterns = [
        /nh·∫Øc\s+(.+)/i,
        /reminder?\s*(.+)/i,
        /ghi nh·ªõ\s*(.+)/i,
        /l∆∞u √Ω\s*(.+)/i,
        /c·∫ßn\s*(ph·∫£i\s*)?l√†m\s*(.+)/i,
        /l√†m\s+(.+)/i,
        /deadline\s*(.+)/i,
        /meeting\s*(.+)/i,
        /h·ªçp\s*(.+)/i,
        /h·∫πn\s*(.+)/i,
        /b√°o c√°o\s*(.+)/i,
        /n·ªôp\s*(.+)/i,
        /h·ªçc\s+(.+)/i,
        /√¥n\s+(.+)/i,
        /t·∫≠p\s+(.+)/i,
        /luy·ªán\s+(.+)/i,
        /ki·ªÉm tra\s*(.+)/i,
        /chu·∫©n b·ªã\s*(.+)/i,
        /setup\s*(.+)/i,
        /review\s*(.+)/i,
        /test\s*(.+)/i
    ];

    // Check for date/time patterns that suggest scheduling
    const hasDateTimePattern = /(\bng√†y mai\b|\bh√¥m nay\b|\bkia\b|\btu·∫ßn\s*sau\b|\btu·∫ßn\s*t·ªõi\b|\bth√°ng\s*sau\b|\bth√°ng\s*t·ªõi\b|\d+\s*(gi·ªù|h)\b|\d+:\d+|\d+\s*(th√°ng|ng√†y)|\bth·ª©\s*[2-8]\b|\bch·ªß\s*nh·∫≠t\b|\bcn\b|\bl√∫c\s*\d+|\bbu·ªïi\s*(s√°ng|chi·ªÅu|t·ªëi)|\b\d+\s*(pm|am)\b)/i.test(text);

    // If has reminder pattern, extract task content
    for (const pattern of reminderPatterns) {
        const match = text.match(pattern);
        if (match) {
            const taskContent = match[1] || match[2] || text;
            return {
                cmd: 'new',
                args: taskContent.trim(),
                confidence: 0.9,
                reasoning: 'Natural language reminder pattern detected'
            };
        }
    }

    // If has task intent keywords or date/time patterns
    if (hasTaskIntent || hasDateTimePattern) {
        return {
            cmd: 'new',
            args: text,
            confidence: hasTaskIntent ? 0.8 : 0.7,
            reasoning: hasTaskIntent ? 'Task intent keywords detected' : 'Date/time pattern suggests task scheduling'
        };
    }

    // Check for simple queries
    if (/^(danh s√°ch|list|xem task|li·ªát k√™|th·ªëng k√™|stats|bao nhi√™u)$/i.test(text)) {
        const isStats = /^(th·ªëng k√™|stats|bao nhi√™u)$/i.test(text);
        return {
            cmd: isStats ? 'stats' : 'list',
            args: '',
            confidence: 0.95,
            reasoning: 'Simple query command in natural language'
        };
    }

    // Default: not a task command
    logger.info(`[Parser] No task intent detected in natural language: "${text}"`);
    return null;
}

/**
 * Fallback to legacy parser for backward compatibility
 * Note: Removed to avoid circular dependency issues
 */
// export function parseCommandLegacy(text: string) {
//     return import('./index.js').then(module => module.parseCommand(text));
// }